# solve.py

# Encrypted flag bytes (37 bytes)
enc = [
    0xDD, 0x7F, 0xDF, 0x3D, 0x93, 0x04, 0x77, 0x55,
    0x4A, 0x9B, 0xAB, 0x9D, 0xEF, 0xCC, 0x5B, 0x71,
    0xFF, 0xE7, 0xEB, 0xB4, 0xB8, 0xC0, 0xFF, 0xE1,
    0x60, 0x10, 0xA7, 0x1B, 0x05, 0xD1, 0x54, 0x3C,
    0xC0, 0xAC, 0xDC, 0xCC, 0x41
]

# 8-byte key from 0xCCBBAA8869423713 (little endian)
key = [0x13, 0x37, 0x42, 0x69, 0x88, 0xAA, 0xBB, 0xCC]

def decrypt_flag(enc_bytes):
    plain = []
    for i, b in enumerate(enc_bytes):
        # Step 1: b1 = enc ^ (3*i + 85)
        b1 = b ^ ((3 * i + 85) & 0xFF)
        # Step 2: swap nibbles
        b2 = ((b1 & 0x0F) << 4) | ((b1 & 0xF0) >> 4)
        # Step 3: subtract (7*i + 23)
        b3 = (b2 - (7 * i + 23)) & 0xFF
        # Step 4: XOR with key byte
        b4 = b3 ^ key[i % len(key)]
        plain.append(b4)
    return bytes(plain)

if __name__ == "__main__":
    flag = decrypt_flag(enc)
    print(flag.decode())
