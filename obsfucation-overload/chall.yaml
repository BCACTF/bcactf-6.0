name: Example Problem
categories:
  - rev
  - crypto
value: 125 # TODO: balance points lmao
flag: bcactf{l33t_0bfusc4t3d_r3v_fun}
# Alternatively:
# flag:
#   file: ./flag.txt
# 
description: |-
  In the world of secret communication, encryption is the first line of defense. But what happens when that encryption becomes too complicated, too obfuscated to even be understood?

  A mysterious encrypted message has been intercepted, and it’s up to you, the digital detective, to crack the code and retrieve the secret it holds. The encryption process, while seemingly complex, follows a set of deterministic rules. The message, when processed with the right key, can be decrypted and restored to its original form.

  In this challenge, you’re provided with a binary file containing an encrypted payload. You’ll need to reverse-engineer the encryption and extract the hidden flag. The encrypted data is manipulated using several reversible operations—XOR, bitwise shifts, and simple transformations.

  But don’t be fooled: while these transformations are simple in nature, the key to success lies in identifying the right decryption process. Only by carefully reversing the operations will you reveal the flag, hidden under layers of confusion.

  Are you ready to solve the puzzle, or will the encryption keep you locked out forever? The clock is ticking… The flag is waiting.

  tldr; this is all chatgpt yap and dont worry, just start reversing alr
hints:
  - Ghidra is a free binary dissassembler and analyzer
  - Have you tried analyzing how the binary works?
files:
  - src: ./overload
authors:
  - Colin
visible: true
# TODO: deployment
